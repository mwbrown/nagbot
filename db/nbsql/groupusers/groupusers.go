// Code generated by gnorm, DO NOT EDIT!

package nbsql_groupusers

import (
	"github.com/mwbrown/nagbot/db/nbsql"
	"github.com/pkg/errors"
)

// Row represents a row from 'group_users'.
type Row struct {
	UserID  int  // user_id (PK)
	GroupID int  // group_id (PK)
	IsOwner bool // is_owner
	IsAdmin bool // is_admin
}

// Field values for every column in GroupUsers.
var (
	UserIDCol  nbsql.IntField  = "user_id"
	GroupIDCol nbsql.IntField  = "group_id"
	IsOwnerCol nbsql.BoolField = "is_owner"
	IsAdminCol nbsql.BoolField = "is_admin"
)

// Query retrieves rows from 'group_users' as a slice of Row.
func Query(db nbsql.DB, where nbsql.WhereClause) ([]*Row, error) {

	var sqlstr string
	var wherevals []interface{}

	const origsqlstr = `SELECT 
		user_id, group_id, is_owner, is_admin
		FROM public.group_users`

	// Allow a nil WhereClause to select all rows.
	if where != nil {
		idx := 1
		sqlstr = origsqlstr + " WHERE (" + where.String(&idx) + ") "
		wherevals = where.Values()
	} else {
		sqlstr = origsqlstr
		wherevals = []interface{}{}
	}

	var vals []*Row

	q, err := db.Query(sqlstr, wherevals...)

	if err != nil {
		return nil, err
	}
	for q.Next() {
		r := Row{}
		err := q.Scan(&r.UserID, &r.GroupID, &r.IsOwner, &r.IsAdmin)
		if err != nil {
			return nil, err
		}
		vals = append(vals, &r)
	}
	return vals, nil
}

// One retrieve one row from 'group_users'.
func One(db nbsql.DB, where nbsql.WhereClause) ([]*Row, error) {
	const origsqlstr = `SELECT 
		user_id, group_id, is_owner, is_admin
		FROM public.group_users WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") "

	var vals []*Row
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		r := Row{}
		err := q.Scan(&r.UserID, &r.GroupID, &r.IsOwner, &r.IsAdmin)
		if err != nil {
			return nil, err
		}
		vals = append(vals, &r)
	}
	return vals, nil
}

// Insert inserts the row into the database.
func Insert(db nbsql.DB, r *Row) error {
	const sqlstr = `INSERT INTO group_users (
			user_id, group_id, is_owner, is_admin
		) VALUES (
			$1, $2, $3, $4
		)`
	_, err := db.Exec(sqlstr, r.UserID, r.GroupID, r.IsOwner, r.IsAdmin)
	return errors.Wrap(err, "insert GroupUsers")
}

// Update updates the Row in the database.
func Update(db nbsql.DB, r *Row) error {
	const sqlstr = `UPDATE group_users SET (
			is_owner, is_admin		
		) = ( 
			$1, $2
		) WHERE
			user_id, group_id = $3, $4
		`
	_, err := db.Exec(sqlstr, r.IsOwner, r.IsAdmin, r.UserID, r.GroupID)
	return errors.Wrap(err, "update GroupUsers:")
}

// Upsert performs an upsert for GroupUsers.
//
// NOTE: PostgreSQL 9.5+ only
func Upsert(db nbsql.DB, r *Row) error {
	const sqlstr = `INSERT INTO group_users (
		is_owner, is_admin, user_id, group_id
	) VALUES (
		$1, $2, $3, $4
	) ON CONFLICT (user_id, group_id) DO UPDATE SET (
		is_owner, is_admin
	) = ( 
		$1, $2
	)`

	_, err := db.Exec(sqlstr, r.IsOwner, r.IsAdmin, r.UserID, r.GroupID)
	return errors.Wrap(err, "upsert GroupUsers")
}

// Delete deletes the Row from the database.
func Delete(
	db nbsql.DB,
	userID int,

	groupID int,
) error {
	const sqlstr = `DELETE FROM group_users WHERE user_id, group_id = $1, $2`

	_, err := db.Exec(
		sqlstr,
		userID,

		groupID,
	)
	return errors.Wrap(err, "delete GroupUsers")
}
