// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nbproto/nagbot.proto

/*
Package nbproto is a generated protocol buffer package.

It is generated from these files:
	nbproto/nagbot.proto

It has these top-level messages:
	TaskDefinition
	OwnerInfo
	ScheduleInfo
	TaskSchedule
	TaskInstance
	LoginRequest
	LoginResponse
	LogoutRequest
	LogoutResponse
	CheckLoginRequest
	CheckLoginResponse
	AddTaskDefRequest
	AddTaskDefResponse
	DelTaskDefRequest
	DelTaskDefResponse
*/
package nbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OwnerInfo_OwnerType int32

const (
	OwnerInfo_NONE  OwnerInfo_OwnerType = 0
	OwnerInfo_USER  OwnerInfo_OwnerType = 1
	OwnerInfo_GROUP OwnerInfo_OwnerType = 2
)

var OwnerInfo_OwnerType_name = map[int32]string{
	0: "NONE",
	1: "USER",
	2: "GROUP",
}
var OwnerInfo_OwnerType_value = map[string]int32{
	"NONE":  0,
	"USER":  1,
	"GROUP": 2,
}

func (x OwnerInfo_OwnerType) String() string {
	return proto.EnumName(OwnerInfo_OwnerType_name, int32(x))
}
func (OwnerInfo_OwnerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// Defines an individual Todo task, of which multiple instances
// can exist.
type TaskDefinition struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (m *TaskDefinition) Reset()                    { *m = TaskDefinition{} }
func (m *TaskDefinition) String() string            { return proto.CompactTextString(m) }
func (*TaskDefinition) ProtoMessage()               {}
func (*TaskDefinition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TaskDefinition) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskDefinition) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// TODO: decide if this is the right approach to use separate ID spaces
// for groups and users, or allow them to overlap.
type OwnerInfo struct {
	Id   uint32              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type OwnerInfo_OwnerType `protobuf:"varint,2,opt,name=type,enum=nbproto.OwnerInfo_OwnerType" json:"type,omitempty"`
}

func (m *OwnerInfo) Reset()                    { *m = OwnerInfo{} }
func (m *OwnerInfo) String() string            { return proto.CompactTextString(m) }
func (*OwnerInfo) ProtoMessage()               {}
func (*OwnerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OwnerInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OwnerInfo) GetType() OwnerInfo_OwnerType {
	if m != nil {
		return m.Type
	}
	return OwnerInfo_NONE
}

type ScheduleInfo struct {
}

func (m *ScheduleInfo) Reset()                    { *m = ScheduleInfo{} }
func (m *ScheduleInfo) String() string            { return proto.CompactTextString(m) }
func (*ScheduleInfo) ProtoMessage()               {}
func (*ScheduleInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TaskSchedule struct {
	Id       uint32                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TaskId   uint32                     `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Owner    *OwnerInfo                 `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	Schedule *ScheduleInfo              `protobuf:"bytes,4,opt,name=schedule" json:"schedule,omitempty"`
	NextDue  *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=next_due,json=nextDue" json:"next_due,omitempty"`
}

func (m *TaskSchedule) Reset()                    { *m = TaskSchedule{} }
func (m *TaskSchedule) String() string            { return proto.CompactTextString(m) }
func (*TaskSchedule) ProtoMessage()               {}
func (*TaskSchedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TaskSchedule) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskSchedule) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskSchedule) GetOwner() *OwnerInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TaskSchedule) GetSchedule() *ScheduleInfo {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *TaskSchedule) GetNextDue() *google_protobuf.Timestamp {
	if m != nil {
		return m.NextDue
	}
	return nil
}

// Instance of a task, tied to an owner (group or user)
type TaskInstance struct {
	Id     uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TaskId uint32     `protobuf:"varint,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Owner  *OwnerInfo `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
}

func (m *TaskInstance) Reset()                    { *m = TaskInstance{} }
func (m *TaskInstance) String() string            { return proto.CompactTextString(m) }
func (*TaskInstance) ProtoMessage()               {}
func (*TaskInstance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TaskInstance) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskInstance) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskInstance) GetOwner() *OwnerInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type LogoutRequest struct {
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type LogoutResponse struct {
}

func (m *LogoutResponse) Reset()                    { *m = LogoutResponse{} }
func (m *LogoutResponse) String() string            { return proto.CompactTextString(m) }
func (*LogoutResponse) ProtoMessage()               {}
func (*LogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// This message is mainly for debugging purposes.
type CheckLoginRequest struct {
}

func (m *CheckLoginRequest) Reset()                    { *m = CheckLoginRequest{} }
func (m *CheckLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckLoginRequest) ProtoMessage()               {}
func (*CheckLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type CheckLoginResponse struct {
}

func (m *CheckLoginResponse) Reset()                    { *m = CheckLoginResponse{} }
func (m *CheckLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckLoginResponse) ProtoMessage()               {}
func (*CheckLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type AddTaskDefRequest struct {
}

func (m *AddTaskDefRequest) Reset()                    { *m = AddTaskDefRequest{} }
func (m *AddTaskDefRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTaskDefRequest) ProtoMessage()               {}
func (*AddTaskDefRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type AddTaskDefResponse struct {
}

func (m *AddTaskDefResponse) Reset()                    { *m = AddTaskDefResponse{} }
func (m *AddTaskDefResponse) String() string            { return proto.CompactTextString(m) }
func (*AddTaskDefResponse) ProtoMessage()               {}
func (*AddTaskDefResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type DelTaskDefRequest struct {
}

func (m *DelTaskDefRequest) Reset()                    { *m = DelTaskDefRequest{} }
func (m *DelTaskDefRequest) String() string            { return proto.CompactTextString(m) }
func (*DelTaskDefRequest) ProtoMessage()               {}
func (*DelTaskDefRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type DelTaskDefResponse struct {
}

func (m *DelTaskDefResponse) Reset()                    { *m = DelTaskDefResponse{} }
func (m *DelTaskDefResponse) String() string            { return proto.CompactTextString(m) }
func (*DelTaskDefResponse) ProtoMessage()               {}
func (*DelTaskDefResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func init() {
	proto.RegisterType((*TaskDefinition)(nil), "nbproto.TaskDefinition")
	proto.RegisterType((*OwnerInfo)(nil), "nbproto.OwnerInfo")
	proto.RegisterType((*ScheduleInfo)(nil), "nbproto.ScheduleInfo")
	proto.RegisterType((*TaskSchedule)(nil), "nbproto.TaskSchedule")
	proto.RegisterType((*TaskInstance)(nil), "nbproto.TaskInstance")
	proto.RegisterType((*LoginRequest)(nil), "nbproto.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "nbproto.LoginResponse")
	proto.RegisterType((*LogoutRequest)(nil), "nbproto.LogoutRequest")
	proto.RegisterType((*LogoutResponse)(nil), "nbproto.LogoutResponse")
	proto.RegisterType((*CheckLoginRequest)(nil), "nbproto.CheckLoginRequest")
	proto.RegisterType((*CheckLoginResponse)(nil), "nbproto.CheckLoginResponse")
	proto.RegisterType((*AddTaskDefRequest)(nil), "nbproto.AddTaskDefRequest")
	proto.RegisterType((*AddTaskDefResponse)(nil), "nbproto.AddTaskDefResponse")
	proto.RegisterType((*DelTaskDefRequest)(nil), "nbproto.DelTaskDefRequest")
	proto.RegisterType((*DelTaskDefResponse)(nil), "nbproto.DelTaskDefResponse")
	proto.RegisterEnum("nbproto.OwnerInfo_OwnerType", OwnerInfo_OwnerType_name, OwnerInfo_OwnerType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nagbot service

type NagbotClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	AddTaskDef(ctx context.Context, in *AddTaskDefRequest, opts ...grpc.CallOption) (*AddTaskDefResponse, error)
	DelTaskDef(ctx context.Context, in *DelTaskDefRequest, opts ...grpc.CallOption) (*DelTaskDefResponse, error)
	CheckLogin(ctx context.Context, in *CheckLoginRequest, opts ...grpc.CallOption) (*CheckLoginResponse, error)
}

type nagbotClient struct {
	cc *grpc.ClientConn
}

func NewNagbotClient(cc *grpc.ClientConn) NagbotClient {
	return &nagbotClient{cc}
}

func (c *nagbotClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/nbproto.Nagbot/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagbotClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := grpc.Invoke(ctx, "/nbproto.Nagbot/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagbotClient) AddTaskDef(ctx context.Context, in *AddTaskDefRequest, opts ...grpc.CallOption) (*AddTaskDefResponse, error) {
	out := new(AddTaskDefResponse)
	err := grpc.Invoke(ctx, "/nbproto.Nagbot/AddTaskDef", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagbotClient) DelTaskDef(ctx context.Context, in *DelTaskDefRequest, opts ...grpc.CallOption) (*DelTaskDefResponse, error) {
	out := new(DelTaskDefResponse)
	err := grpc.Invoke(ctx, "/nbproto.Nagbot/DelTaskDef", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagbotClient) CheckLogin(ctx context.Context, in *CheckLoginRequest, opts ...grpc.CallOption) (*CheckLoginResponse, error) {
	out := new(CheckLoginResponse)
	err := grpc.Invoke(ctx, "/nbproto.Nagbot/CheckLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nagbot service

type NagbotServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	AddTaskDef(context.Context, *AddTaskDefRequest) (*AddTaskDefResponse, error)
	DelTaskDef(context.Context, *DelTaskDefRequest) (*DelTaskDefResponse, error)
	CheckLogin(context.Context, *CheckLoginRequest) (*CheckLoginResponse, error)
}

func RegisterNagbotServer(s *grpc.Server, srv NagbotServer) {
	s.RegisterService(&_Nagbot_serviceDesc, srv)
}

func _Nagbot_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagbotServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nbproto.Nagbot/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagbotServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagbot_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagbotServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nbproto.Nagbot/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagbotServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagbot_AddTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagbotServer).AddTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nbproto.Nagbot/AddTaskDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagbotServer).AddTaskDef(ctx, req.(*AddTaskDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagbot_DelTaskDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTaskDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagbotServer).DelTaskDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nbproto.Nagbot/DelTaskDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagbotServer).DelTaskDef(ctx, req.(*DelTaskDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagbot_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagbotServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nbproto.Nagbot/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagbotServer).CheckLogin(ctx, req.(*CheckLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nagbot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nbproto.Nagbot",
	HandlerType: (*NagbotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Nagbot_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Nagbot_Logout_Handler,
		},
		{
			MethodName: "AddTaskDef",
			Handler:    _Nagbot_AddTaskDef_Handler,
		},
		{
			MethodName: "DelTaskDef",
			Handler:    _Nagbot_DelTaskDef_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _Nagbot_CheckLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nbproto/nagbot.proto",
}

func init() { proto.RegisterFile("nbproto/nagbot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xdf, 0x8f, 0xd2, 0x40,
	0x10, 0xc7, 0xaf, 0xc8, 0xcf, 0x11, 0x10, 0x57, 0xf4, 0x9a, 0x6a, 0x22, 0xd9, 0xc4, 0x84, 0xf8,
	0x50, 0x14, 0x35, 0x31, 0xf1, 0xc9, 0xc8, 0x79, 0x21, 0x31, 0x60, 0xf6, 0xb8, 0xe7, 0x4b, 0xa1,
	0x03, 0xd7, 0x00, 0xbb, 0x95, 0xdd, 0xe6, 0xe4, 0x6f, 0xf4, 0x3f, 0xf0, 0xaf, 0x31, 0xdd, 0x2e,
	0xed, 0x6a, 0xef, 0xd5, 0xb7, 0x9d, 0xef, 0x7e, 0xe6, 0x3b, 0x33, 0x3b, 0x2d, 0xf4, 0xf9, 0x32,
	0x3e, 0x08, 0x25, 0x46, 0x3c, 0xd8, 0x2c, 0x85, 0xf2, 0x75, 0x40, 0x1a, 0x46, 0xf5, 0x5e, 0x6e,
	0x84, 0xd8, 0xec, 0x70, 0xa4, 0xa3, 0x65, 0xb2, 0x1e, 0xa9, 0x68, 0x8f, 0x52, 0x05, 0xfb, 0x38,
	0x23, 0xe9, 0x7b, 0xe8, 0x2e, 0x02, 0xb9, 0x9d, 0xe0, 0x3a, 0xe2, 0x91, 0x8a, 0x04, 0x27, 0x5d,
	0xa8, 0x44, 0xa1, 0xeb, 0x0c, 0x9c, 0x61, 0x87, 0x55, 0xa2, 0x90, 0x10, 0xa8, 0x86, 0x28, 0x57,
	0x6e, 0x65, 0xe0, 0x0c, 0x5b, 0x4c, 0x9f, 0xe9, 0x11, 0x5a, 0xf3, 0x3b, 0x8e, 0x87, 0x29, 0x5f,
	0x8b, 0x52, 0xc2, 0x1b, 0xa8, 0xaa, 0x63, 0x8c, 0x3a, 0xa1, 0x3b, 0x7e, 0xe1, 0x9b, 0x5e, 0xfc,
	0x3c, 0x23, 0x3b, 0x2d, 0x8e, 0x31, 0x32, 0x4d, 0xd2, 0xd7, 0xc6, 0x2e, 0x95, 0x48, 0x13, 0xaa,
	0xb3, 0xf9, 0xec, 0xa2, 0x77, 0x96, 0x9e, 0xae, 0xaf, 0x2e, 0x58, 0xcf, 0x21, 0x2d, 0xa8, 0x5d,
	0xb2, 0xf9, 0xf5, 0xf7, 0x5e, 0x85, 0x76, 0xa1, 0x7d, 0xb5, 0xba, 0xc5, 0x30, 0xd9, 0x61, 0xea,
	0x45, 0x7f, 0x39, 0xd0, 0x4e, 0x27, 0x38, 0x89, 0xa5, 0x76, 0xce, 0xa1, 0xa1, 0x02, 0xb9, 0xbd,
	0x89, 0x42, 0xdd, 0x51, 0x87, 0xd5, 0xd3, 0x70, 0x1a, 0x92, 0x21, 0xd4, 0x44, 0x5a, 0xd5, 0x7d,
	0x30, 0x70, 0x86, 0x0f, 0xc7, 0xa4, 0xdc, 0x28, 0xcb, 0x00, 0xf2, 0x16, 0x9a, 0xd2, 0xd8, 0xbb,
	0x55, 0x0d, 0x3f, 0xcd, 0x61, 0xbb, 0x19, 0x96, 0x63, 0xe4, 0x03, 0x34, 0x39, 0xfe, 0x54, 0x37,
	0x61, 0x82, 0x6e, 0x4d, 0xa7, 0x78, 0x7e, 0xb6, 0x0b, 0xff, 0xb4, 0x0b, 0x7f, 0x71, 0xda, 0x05,
	0x6b, 0xa4, 0xec, 0x24, 0x41, 0x1a, 0x64, 0xc3, 0x4c, 0xb9, 0x54, 0x01, 0x5f, 0xfd, 0x8f, 0x61,
	0xe8, 0x57, 0x68, 0x7f, 0x13, 0x9b, 0x88, 0x33, 0xfc, 0x91, 0xa0, 0x54, 0xc4, 0x83, 0x66, 0x22,
	0xf1, 0xc0, 0x83, 0x3d, 0xea, 0x42, 0x2d, 0x96, 0xc7, 0xe9, 0x5d, 0x1c, 0x48, 0x79, 0x27, 0x0e,
	0xa1, 0xd9, 0x7f, 0x1e, 0xd3, 0x57, 0xd0, 0x31, 0x3e, 0x32, 0x16, 0x5c, 0x22, 0xe9, 0x43, 0x4d,
	0x89, 0x2d, 0x72, 0xe3, 0x92, 0x05, 0xf4, 0x91, 0xc6, 0x44, 0xa2, 0x4c, 0x3d, 0xda, 0x83, 0xee,
	0x49, 0xc8, 0x12, 0xe9, 0x13, 0x78, 0xfc, 0xe5, 0x16, 0x57, 0x5b, 0xbb, 0x2d, 0xda, 0x07, 0x62,
	0x8b, 0x05, 0xfa, 0x39, 0x0c, 0xcd, 0x17, 0x6b, 0xa1, 0xb6, 0x58, 0xa0, 0x13, 0xdc, 0x95, 0x51,
	0x5b, 0xcc, 0xd0, 0xf1, 0xef, 0x0a, 0xd4, 0x67, 0xfa, 0xff, 0x21, 0x1f, 0xa1, 0xa6, 0x2b, 0x92,
	0x62, 0xc3, 0x76, 0x5b, 0xde, 0xb3, 0x7f, 0x65, 0x53, 0xed, 0x8c, 0x7c, 0x82, 0x7a, 0x36, 0x17,
	0xf9, 0x8b, 0x29, 0x26, 0xf7, 0xce, 0x4b, 0x7a, 0x9e, 0x7c, 0x09, 0x50, 0x8c, 0x40, 0xbc, 0x1c,
	0x2c, 0x0d, 0xeb, 0x3d, 0xbf, 0xf7, 0xce, 0x36, 0x2a, 0x06, 0xb4, 0x8c, 0x4a, 0x4f, 0x61, 0x19,
	0x95, 0x5f, 0x24, 0x33, 0x2a, 0xde, 0xdf, 0x32, 0x2a, 0x6d, 0xca, 0x32, 0xba, 0x67, 0x61, 0x67,
	0xcb, 0xba, 0xbe, 0x7b, 0xf7, 0x27, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x72, 0xe5, 0x83, 0xaa, 0x04,
	0x00, 0x00,
}
