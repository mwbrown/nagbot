// Code generated by gnorm, DO NOT EDIT!

package nbsql_taskinstances

import (
	"github.com/mwbrown/nagbot/ndb/nbsql"
	"github.com/pkg/errors"
)

// Row represents a row from 'task_instances'.
type Row struct {
	ID     int // id (PK)
	TaskID int // task_id
}

// Field values for every column in TaskInstances.
var (
	IDCol     nbsql.IntField = "id"
	TaskIDCol nbsql.IntField = "task_id"
)

// Query retrieves rows from 'task_instances' as a slice of Row.
func Query(db nbsql.DB, where nbsql.WhereClause) ([]*Row, error) {

	var sqlstr string
	var wherevals []interface{}

	const origsqlstr = `SELECT 
		id, task_id
		FROM public.task_instances`

	// Allow a nil WhereClause to select all rows.
	if where != nil {
		idx := 1
		sqlstr = origsqlstr + " WHERE (" + where.String(&idx) + ") "
		wherevals = where.Values()
	} else {
		sqlstr = origsqlstr
		wherevals = []interface{}{}
	}

	var vals []*Row

	q, err := db.Query(sqlstr, wherevals...)

	if err != nil {
		return nil, err
	}
	for q.Next() {
		r := Row{}
		err := q.Scan(&r.ID, &r.TaskID)
		if err != nil {
			return nil, err
		}
		vals = append(vals, &r)
	}
	return vals, nil
}

// One retrieve one row from 'task_instances'.
func One(db nbsql.DB, where nbsql.WhereClause) ([]*Row, error) {
	const origsqlstr = `SELECT 
		id, task_id
		FROM public.task_instances WHERE (`

	idx := 1
	sqlstr := origsqlstr + where.String(&idx) + ") "

	var vals []*Row
	q, err := db.Query(sqlstr, where.Values()...)
	if err != nil {
		return nil, err
	}
	for q.Next() {
		r := Row{}
		err := q.Scan(&r.ID, &r.TaskID)
		if err != nil {
			return nil, err
		}
		vals = append(vals, &r)
	}
	return vals, nil
}

// Insert inserts the row into the database.
func Insert(db nbsql.DB, r *Row) error {
	const sqlstr = `INSERT INTO task_instances (
			id, task_id
		) VALUES (
			$1, $2
		)`
	_, err := db.Exec(sqlstr, r.ID, r.TaskID)
	return errors.Wrap(err, "insert TaskInstances")
}

// Update updates the Row in the database.
func Update(db nbsql.DB, r *Row) error {
	const sqlstr = `UPDATE task_instances SET (
			task_id		
		) = ( 
			$1
		) WHERE
			id = $2
		`
	_, err := db.Exec(sqlstr, r.TaskID, r.ID)
	return errors.Wrap(err, "update TaskInstances:")
}

// Upsert performs an upsert for TaskInstances.
//
// NOTE: PostgreSQL 9.5+ only
func Upsert(db nbsql.DB, r *Row) error {
	const sqlstr = `INSERT INTO task_instances (
		task_id, id
	) VALUES (
		$1, $2
	) ON CONFLICT (id) DO UPDATE SET (
		task_id
	) = ( 
		$1
	)`

	_, err := db.Exec(sqlstr, r.TaskID, r.ID)
	return errors.Wrap(err, "upsert TaskInstances")
}

// Delete deletes the Row from the database.
func Delete(
	db nbsql.DB,
	id int,
) error {
	const sqlstr = `DELETE FROM task_instances WHERE id = $1`

	_, err := db.Exec(
		sqlstr,
		id,
	)
	return errors.Wrap(err, "delete TaskInstances")
}
